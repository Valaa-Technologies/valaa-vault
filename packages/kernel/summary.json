{
  "workspaces": {
    "toolset": {
      "valma": {
        "version": "0.37.0-prerelease.0",
        "description": "A ValOS CLI tool for discovering and executing context-dependent command scripts",
        "license": "MIT"
      },
      "@valos/toolset-revealer": {
        "version": "0.37.0-prerelease.0",
        "description": "Tools for building revelations both for development and deployment purposes",
        "license": "MIT"
      }
    },
    "library": {
      "@valos/engine": {
        "version": "0.37.0-prerelease.0",
        "description": "ValOS Engine API and Schema",
        "homepage": "https://valospace.org/engine",
        "license": "MIT"
      },
      "@valos/gateway-api": {
        "version": "0.37.0-prerelease.0",
        "description": "Minimal footprint ValOS Gateway API local forwards",
        "license": "MIT"
      },
      "@valos/hypertwin": {
        "version": "0.37.0-prerelease.0",
        "description": "ValOS Hypertwin Specifications and Tools Library",
        "license": "MIT"
      },
      "@valos/inspire": {
        "version": "0.37.0-prerelease.0",
        "description": "ValOS Inspire application gateway",
        "homepage": "https://valospace.org/inspire",
        "license": "MIT"
      },
      "@valos/raem": {
        "version": "0.37.0-prerelease.0",
        "description": "ValOS Resources And Events Model (ValOS-RAEM) API, schema and ontology",
        "homepage": "https://valospace.org/raem",
        "license": "MIT"
      },
      "@valos/script": {
        "version": "0.37.0-prerelease.0",
        "description": "ValOS Script API, schema",
        "homepage": "https://valospace.org/script",
        "license": "MIT"
      },
      "@valos/sourcerer": {
        "version": "0.37.0-prerelease.0",
        "description": "ValOS Sourcerer API, schema",
        "homepage": "https://valospace.org/sourcerer",
        "license": "MIT"
      },
      "@valos/tools": {
        "version": "0.37.0-prerelease.0",
        "description": "ValOS Tools API",
        "license": "MIT"
      }
    },
    "domain": {
      "@valos/kernel": {
        "version": "0.37.0-prerelease.0",
        "description": "@valos/kernel domain",
        "homepage": "https://valospace.org/kernel",
        "license": "MIT",
        "repository": "https://github.com/valaatech/kernel"
      }
    },
    "vdoc-extension": {
      "@valos/revdoc": {
        "version": "0.37.0-prerelease.0",
        "description": "ReVDoc - ReSpec document VDoc extension",
        "homepage": "https://valospace.org/revdoc",
        "license": "MIT"
      },
      "@valos/sbomdoc": {
        "version": "0.37.0-prerelease.0",
        "description": "SBoMDoc - Software Bill of Materials VDoc extension",
        "homepage": "https://valospace.org/sbomdoc",
        "license": "MIT"
      },
      "@valos/twindoc": {
        "version": "0.37.0-prerelease.0",
        "description": "TwinDoc - Valospace Hypertwin VDoc extension",
        "homepage": "https://valospace.org/twindoc",
        "license": "MIT"
      },
      "@valos/vdoc": {
        "version": "0.37.0-prerelease.0",
        "description": "VDoc - ValOS document interchange specification",
        "homepage": "https://valospace.org/vdoc",
        "license": "MIT"
      }
    },
    "spindle": {
      "@valos/web-spindle": {
        "version": "0.37.0-prerelease.0",
        "description": "A spindle for structured ValOS Web APIs",
        "homepage": "https://valospace.org/web-spindle",
        "license": "MIT"
      }
    },
    "type": {
      "@valos/type-spindle": {
        "version": "0.37.0-prerelease.0",
        "description": "The ValOS 'spindle' workspace type toolset",
        "license": "MIT"
      },
      "@valos/type-opspace": {
        "version": "0.37.0-prerelease.0",
        "description": "The ValOS 'opspace' workspace type toolset",
        "license": "MIT"
      },
      "@valos/type-vault": {
        "version": "0.37.0-prerelease.0",
        "description": "The ValOS 'vault' workspace type toolset",
        "homepage": "https://valospace.org/type-vault",
        "license": "MIT"
      },
      "@valos/type-worker": {
        "version": "0.37.0-prerelease.0",
        "description": "The ValOS 'worker' workspace type toolset",
        "license": "MIT"
      },
      "@valos/type-domain": {
        "version": "0.37.0-prerelease.0",
        "description": "The ValOS domain workspace type toolset",
        "license": "MIT"
      }
    }
  },
  "types": {
    "tool": {
      "description": "'tool' workspace type is deprecated",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "'tool' workspace type is deprecated.\n\nTools are a toolset implementation detail. A tool is similar to\na toolset in that it can have its own workspace specific\nconfigurations. A tool differs from a toolset in that it cannot be\nstandalone; it doesn't appear in listings, its always part of one or\nmore toolsets and its toolsets.json config stanzas are placed under\nits parent toolset stanzas.\n\nThe main case for tools and toolsets separation came from the release\ndeployment system of opspaces, where the modularity and granular\nsemantic versioning of tool packages allows for more efficient and\nrobust deployments.\n\nTool workspaces allows splitting complex toolsets into separate\ntools with different deployment logic. Infrastructure code which\nchanges rarily can be placed under tool packages with naive\ndeployment logic which relies on the tool package version number only.\nFrequently changing configs can be managed by the toolset workspace\nitself but even it can then use tool workspaces to source in\ncommands and other resources to help with the deployment management.\n\nAdditionally because the tool configuration is always inside its\nparent toolset config this allows the same tool be used by several\ndifferent toolsets in a single workspace. Because of this all tool\ncommands must have an option for '--toolset=<@scope/toolsetname>' which\nuses yargs.vlm.toolset as its default value.\n"
    },
    "toolset": {
      "description": "Construct a collection of valma tools that other workspaces can select and use",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Construct a collection of valma tools that other workspaces can select and use.\n\nA toolset is a package that can be selected by any valos workspace\nduring 'vlm init'. More precisely:\n1. given that the toolset is registered to a domain, and\n2. the workspace is set up to use this domain (f.ex. during 'vlm init'), then\n2. the 'vlm configure' presents the toolset as a selectable option, and if selected,\n3. the toolset is added as a devDependency to the workspace, and also\n4. a toolset configuration section with \"inUse: true\" is added to the\n  workspace 'toolsets.json' using the toolset name as the key, and finally\n5. the toolset configuration valma command is called by 'vlm configure'\n\nThis makes all valma commands and other primitives of the toolset\navailable for the workspace and also allows these commands to manage\ntheir workspace-specific configurations.\n\n"
    },
    "domain": {
      "description": "Curate a valos discovery domain of packages",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Curate a valos discovery domain of packages.\n\nA domain package provides a set of valma commands for defining and\nmanaging a ValOS domain. Specific domain workspaces then:\n1. shall provide domain package (de)registration via\n   .configure/.<domain>/{,de}register-package\n2. can provide new workspace types via .select/.type/*\n3. can provide new toolsets via\n   .select/.toolsets/{,.domain/<domain>/}{,.type/<type>/}{,.workspace/<name>}/**/*\n\nNotably the package (de)registration should provide means for any new\ndomain toolset packages to request the addition of their toolset\nconfigure command to the domain domain.\nIdiomatic way to implement this is a domain command which issues a PR\nagainst the source control repository of the domain package.\n"
    },
    "type": {
      "description": "Declare a new valos type",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Declare a new valos type.\n\nA valos type is a name that can be chosen as a package.json:valos.type\nduring workspace init. Each type serves a particular purpose which is\ndescribed in the type introduction.\n\nEach type is optionally associated with a specific type toolset. This\ntoolset is automatically added as an always-in-use dependency and\nprovides commands and library code for the workspace.\n\nAs an example the type 'worker' adds the toolset @valos/type-worker\nwhich provides template files and shared code for managing perspire\ngateway execution environments.\n\nAs a bit more self-referential example the type 'toolset' adds the\ntoolset @valos/type-toolset. This type toolset  provides commands and\nshared code for managing the valos toolset functionality itself.\n\nFinally, the type 'type' is the type of all type toolsets themselves.\nInitializing a new workspace with type 'type' introduces a new type to\nthe ValOS ecosystem.\n"
    },
    "opspace": {
      "description": "Dev a singular but repeated Ops 'build-release' / 'deploy-release' task",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Dev a singular but repeated Ops 'build-release' / 'deploy-release' task.\n\nAn opspaces workspace is used to for configuring, deploying, updating,\nmonitoring and diagnosing all types of live infrastructure resources.\n\nOpspaces rely heavily on various toolsets to get their job done.\nOpspaces rarily are published and packages and typically reside in\n\"opspaces/*\" vault workspace directory\n"
    },
    "library": {
      "description": "Develop a publishable software components package",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Develop a publishable software components package.\n\nA library workspace contains arbitrary ES5 source code and exposes a\nAPI via package.json .main stanza (usually index.js).\n\nA library can provide convenience valma commands but unlike toolsets\na library cannot have workspace local configurations.\n\nLibrary workspaces are almost always published as a packages and\ntypically reside in \"packages/*\" vault workspace directory.\n"
    },
    "spindle": {
      "description": "Develop a valos gateway plugin",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Develop a valos gateway plugin.\n\nA gateway spindle extends inspire and perspire gateways with various\nfunctionalities.\n\nCore spindles provide new resource schemas, media decoders, protocol\nschemes, external APIs, valosheath APIs, etc.\n\nCustom spindles can be plugged into workers for arbitrary code but are\nonly available on inspire if they are explicitly bundled with it.\n\nSpindles load their configuration from the gateway revelation. When a\nparticular spindle is configured for a perspire worker its\nconfiguration is typically placed as a tool the toolset.\n\n"
    },
    "worker": {
      "description": "Execute perspire gateway as a Node.js process in this workspace",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Execute perspire gateway as a Node.js process in this workspace.\n\nA worker workspace contains configuration and data (both static and\nruntime) and library dependencies used by the on-going process.\n\nThe worker directories are less opinionated and thus more flexible than\nother valos types. They can be ad-hoc, script-generated, zipped and\ncopy-distributed, stored inside containers, stored in version control\n(or not), sharded, etc. The package.json is only used to source in\nthe dependencies. Toolsets.json not only hosts configuration but can\nalso contain dynamic state.\n\n"
    },
    "vdoc-extension": {
      "description": "Extend valos document spec with domain specific vocabulary and functionality",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Extend valos document spec with domain specific vocabulary and functionality.\n\nA vdoc-extension workspace contains the extension specification and\nsupporting libraries for a VDoc extension. It inherits library\nworkspace characteristics but has a specific structure and initial\ntemplates which is useful for VDoc extensions in specific.\n\n"
    },
    "vault": {
      "description": "Maintain many workspaces in a single version controlled mono-repository",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Maintain many workspaces in a single version controlled mono-repository.\n\nA vault is a *monorepository* which contains multiple sub-workspaces\nof various types. Vaults are used to group packages with high cohesion\ntogether so that development, testing, review and deployment workflows\ncan be done within a single repository when feasible.\n\nVault is primarily an organizational unit and is hosted in a single\nversion control repository. All sub-workspaces have identical access\nrights for all contributors. All sub-workspaces must have similar\nlicences. Exceptions to this must be clearly noted both in the\nexceptional workspace root document as well as in the vault root\ndocument.\n\nA vault can have different types of workspaces in it; some of these\n(such as libraries, toolsets) may be published to repositories as\n*packages* so that they can be used as dependencies for other\nworkspaces. Others are only local and used for other purposes;\n*opspaces* contain configurations and tools for managing infrastructure\nconfigurations and *workers* contain files for spawning local processes.\n\nNo matter what the valos type of the domain all share important\nqualities: they can have package dependencies, are versioned and are\nmanaged by valma.\n\nA vault often also manages a *domain* for the packages it publishes via\na *domain package*. Domain is a discovery construct. When\na domain package is added as a devDependency to some external package\nthen valma will be able to list and configure any applicable toolsets\nand other workspaces for this package.\n\n"
    }
  },
  "toolsets": {
    "@valos/authority-spindle": {
      "disabled": "DISABLED",
      "explanation": ".disabled => Toolset '@valos/authority-spindle' only selectable by 'worker' workspaces",
      "description": "Host a standalone authority using web-spindle route projectors",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Host a standalone authority using web-spindle route projectors.\n\nHost a standalone authority using web-spindle route projectors.\n\nRequires @valos/web-spindle toolset to be in use.\n\n"
    },
    "@valos/type-toolset": {
      "description": "Make current workspace selectable as a toolset for other workspaces",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Make current workspace selectable as a toolset for other workspaces.\n\nA toolset is a package that can be selected by any valos workspace\nduring 'vlm init'. More precisely:\n1. given that the toolset is registered to a domain, and\n2. the workspace is set up to use this domain (f.ex. during 'vlm init'), then\n2. the 'vlm configure' presents the toolset as a selectable option, and if selected,\n3. the toolset is added as a devDependency to the workspace, and also\n4. a toolset configuration section with \"inUse: true\" is added to the\n  workspace 'toolsets.json' using the toolset name as the key, and finally\n5. the toolset configuration valma command is called by 'vlm configure'\n\nThis makes all valma commands and other primitives of the toolset\navailable for the workspace and also allows these commands to manage\ntheir workspace-specific configurations.\n\n"
    },
    "@valos/web-spindle": {
      "disabled": "DISABLED",
      "explanation": ".disabled => Toolset '@valos/web-spindle' only selectable by 'worker' workspaces",
      "description": "Project http/s requests to valospace-fabric via a gateway plugin",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Project http/s requests to valospace-fabric via a gateway plugin.\n\nSelects web-spindle as a worker toolset.\n"
    },
    "@valos/toolset-revealer": {
      "description": "Run 'vlm rouse-revealer' to serve local inspire sites with webpack-dev-server",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Run 'vlm rouse-revealer' to serve local inspire sites with webpack-dev-server.\n\nThis toolset enables valma command 'rouse-revealer' for deploying a\nlocal dev environment for inspire gateway revelations.\n\nSets up the webpack entry and output config as webpack.config.js in\nthe workspace root, which combines shared revealer config from\n@valos/toolset-revealer/shared/webpack.config.js, local toolset config\nand any customizations in the root webpack.config.js itself.\n"
    }
  },
  "tools": {
    "copy-template-files": {
      "disabled": "DISABLED",
      "explanation": ".disabled => Tools must have a context-vlm.toolset specified",
      "description": "Copy toolset template files to the workspace",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Copy toolset template files to the workspace.\n\nCopy toolset template files to the workspace.\n\nWhen selected for a toolset this tool will copy all template files from\nthe toolset package templates/ sub-directory to the current workspace.\n\n"
    },
    "docs": {
      "description": "Generate /docs html files from all vault revdocs files",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Generate /docs html files from all vault revdocs files.\n\nThis type-vault tool provides commands for (re)generating the /docs\nfolder from document sources present in the local workspaces, notably\nall revdoc documents matching glob '*.revdoc{,.test}.js'.\nAdditionally this tool can be configured to regenerate all docs on\n(pre)release time.\n"
    },
    "domain": {
      "description": "Setup a type-domain package for curating the domain of this vault",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Setup a type-domain package for curating the domain of this vault.\n\nThis type-vault tool enables the domain management and (re)generation\nof docs/index.html domain summary revdoc document.\n"
    },
    "enable-babel": {
      "description": "Transpile the library files on assembly with the vault babel.config.js",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Transpile the library files on assembly with the vault babel.config.js.\n\nThis tool enables babel transpilation for a library workspace when\n'vlm assemble-packages' is executed in the surrounding vault workspace.\n"
    }
  },
  "commands": {
    "clean-vault": {
      "description": "Clean various more or less transient vault files and subdirectories",
      "package": "@valos/kernel",
      "version": "0.37.0-prerelease.1",
      "introduction": "Clean various more or less transient vault files and subdirectories.\n\nBy default the three elements installed by 'yarn install' are cleaned:\n1. workspace packages by 'lerna clean --yes'\n2. yalc local dependencies by 'yalc remove --all'\n3. vault root node_modules by 'rm -rf'\n\nIn addition, dist/ can be removed with --dist in preparation for a clean slate publish/deploy ops.\nBe mindful that all of dist/ will be removed.\nyarn.lock can be removed with --yarn in preparation for persisted dependency updates.\n"
    },
    "compose-revelation": {
      "description": "Compose revealer bundles based on the revealer toolset config",
      "package": "@valos/toolset-revealer",
      "version": "0.37.0-prerelease.1",
      "introduction": "Compose revealer bundles based on the revealer toolset config.\n\n\n"
    },
    "rouse-revealer": {
      "description": "Launch a webpack-dev-server at localhost serving a local revelation",
      "package": "@valos/toolset-revealer",
      "version": "0.37.0-prerelease.1",
      "introduction": "Launch a webpack-dev-server at localhost serving a local revelation.\n\nThe revelation consists of two parts: webpack output and static files.\nWebpack output is configured by the project root webpack.config.js and\nthe static files are served from --content-base. If this --content-base\ndoesn't exist it is created by copying all files from the directory(s)\nprovided by --content-source.\n"
    },
    "build-release": {
      "disabled": "DISABLED",
      "explanation": ".disabled => Toolset '@valos/type-opspace' not selected by the current workspace",
      "description": "Build a new release of this opspace",
      "package": "@valos/type-opspace",
      "version": "0.37.0-prerelease.1",
      "introduction": "Build a new release of this opspace.\n\nThis command prepares, builds and tests a new opspace release locally\nwithout making external changes. This forms the first part of the\nopspace deployment process. The second half is `deploy-release` which\nperforms the actual deployment process.\n\nThis command resolves a local 'releasePath' for the build and then\ninvokes all release-build sub-commands as follows:\n\nvlm .release-build/${toolsetGlob || \"**/*\"} --target=${releasePath} ${rest}\n\nThese sub-commands (which can be local opspace commands or commands\nprovided by opspace toolset dependencies) then (re)build the actual\nbuild artifacts under the target path.\n\n"
    },
    "deploy-release": {
      "disabled": "DISABLED",
      "explanation": ".disabled => Toolset '@valos/type-opspace' not selected by the current workspace",
      "description": "Deploy previously built releases to their deployment targets",
      "package": "@valos/type-opspace",
      "version": "0.37.0-prerelease.1",
      "introduction": "Deploy previously built releases to their deployment targets.\n\nThis command is second part of the two-part deployment with\nbuild-release building the release.\n"
    },
    "assemble-packages": {
      "description": "Assemble all current modified vault packages (preparing for publish)",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Assemble all current modified vault packages (preparing for publish).\n\nUses lerna to handle the monorepo sub-packages update detection,\nversioning, and git interactions. Configuration for lerna is in\nlerna.json: notably the version increase semantics is configured there.\n\nLerna is not used for constructing the actual packages. This is done by\na flat recursive cp to the target at the moment.\n\nInvokes babel for all projects with babel.config.js in their root. If\nthe vault has a shared babel.config.js for all packages, a symlink from\nthis root to each project should be created.\n\nWhen assembling lerna will automatically update the shared version for\nall packages and their cross-dependencies and make a git commit and git\ntag for the new version.\nThis behaviour can be omitted with --no-versioning.\n\n  Iterative development with yalc and publish-packages:\n\nOnce a set of packages has been been built to the target, run:\n\n'vlm publish-packages --publisher=yalc'\n\nThis will make the package assemblies available in a local yalc\n'registry'; see https://github.com/whitecolor/yalc for more details on\nhow to use such packages by other depending packages. Reassembling\nand pushing those changes through yalc to dependents can be done with:\n\n'vlm assemble-packages --reassemble --post-execute=\"cd $ASSEMBLY_TARGET && yalc push --no-sig\"'\n\nThis allows packages to be developed iteratively locally while having\nother packages depend and be tested against them.\n\n"
    },
    "generate-domain-summary": {
      "description": "Generate the domain components summary file for the domain root revdoc",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Generate the domain components summary file for the domain root revdoc.\n\n\n"
    },
    "release-vault": {
      "description": "Prepare, commit and potentially publish a new release of vault packages",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Prepare, commit and potentially publish a new release of vault packages.\n\nPrepares a release to a new or existing release/develop branch based\non given options and current environment.\n\nPrepares the release by first running sanity checks, then cleaning and\nreinstalling intermediate files like node_modules, yarn workspaces,\nyarn.lock and dist/ and finally requires all test suites and lint to\npass without errors.\n\nOnce preparation is done creates a new release commit and tag using\n'lerna version'.\n\nIf --publish is not explicitly given then the final publish step must\nbe manually performed. In this case a pre-publish phase is done which\nprepares the manual publish command instructions in the results output.\n\nWill invoke valma command hooks between phases as follows:\n1. 'vlm .release-vault/.prepared-hooks/{**/,}* --summary=<obj>' after successful preparation\n2. 'vlm .release-vault/.committed-hooks/{**/,}* --summary=<obj>' after successful commit\n3. 'vlm .release-vault/.pre-published-hooks/{**/,}* --summary=<obj>' after successful pre-publish\n4. 'vlm .release-vault/.published-hooks/{**/,}* --summary=<obj>' after successful publish\n\n"
    },
    "publish-packages": {
      "description": "Publish package assemblies to their registries",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Publish package assemblies to their registries.\n\n\n"
    },
    "regenerate-docs": {
      "description": "Regenerate all configured /docs content",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Regenerate all configured /docs content.\n\n\n"
    },
    "write-revdoc": {
      "description": "Write a new revdoc source code file",
      "package": "@valos/type-vault",
      "version": "0.37.0-prerelease.1",
      "introduction": "Write a new revdoc source code file.\n\n\n"
    },
    "bundle-revelation": {
      "description": "Bundles chronicles and other preloadable content into a revela.json",
      "package": "@valos/type-worker",
      "version": "0.37.0-prerelease.1",
      "introduction": "Bundles chronicles and other preloadable content into a revela.json.\n\n\nLists the chronicles listed in the revelation-path prologue.\nPreloads their event logs and media contents using vlm export-chronicle.\nBundles these back into revelation files and adds them into prologue\nchronicleVLogs, chronicleMediaInfos, bvobInfos and bvobBuffers sections.\n"
    },
    "export-chronicle": {
      "description": "Exports given chronicle as file hierarchy under target directory",
      "package": "@valos/type-worker",
      "version": "0.37.0-prerelease.1",
      "introduction": "Exports given chronicle as file hierarchy under target directory.\n\nUses perspire.\n"
    },
    "perspire": {
      "description": "Launch a headless worker gateway for virtual DOM ValOS computation jobs",
      "package": "@valos/type-worker",
      "version": "0.37.0-prerelease.1",
      "introduction": "Launch a headless worker gateway for virtual DOM ValOS computation jobs.\n\n\n"
    },
    "configure": {
      "description": "Configure the current ValOS workspace type, domain and all configurables",
      "package": "valma",
      "version": "0.37.0-prerelease.1",
      "introduction": "Configure the current ValOS workspace type, domain and all configurables.\n\nConfigures type and domain, selects and stows toolsets, tools and\nother  configurables and finally configures them.\n"
    },
    "status": {
      "description": "Display the status of the current valos workspace",
      "package": "valma",
      "version": "0.37.0-prerelease.1",
      "introduction": "Display the status of the current valos workspace.\n\nIf toolsetGlob is specified the status is limited to status scripts\nmatching '.status/*{toolsetGlob}*/**/*', otherwise all status scripts\nby '.status/**/*' are used.\n"
    },
    "draft-command": {
      "description": "Draft and possibly export a new valma command script",
      "package": "valma",
      "version": "0.37.0-prerelease.1",
      "introduction": "Draft and possibly export a new valma command script.\n\nThe new command is drafted as a local valma.bin/ command with the\nsource file in valma/, making it the highest priority command and\nimmediately available.\nWith --import a existing exported script is copied for local editing\nand development.\n"
    },
    "@": {
      "description": "Execute a package bin command within valma context interactively",
      "package": "valma",
      "version": "0.37.0-prerelease.1",
      "introduction": "Execute a package bin command within valma context interactively.\n\nExecute a package bin command within valma context interactively.\n\nThis is the command line shim to valma script vlm.interact.\nLike 'npx -c' it executes a regular command exported by some package\ndependency to the node_modules/.bin/ folder.\n\nUnlike 'npx' which only searches the current directory and the global\ncache '@' prepends all available valma pools to env.PATH, innermost\npool first.\n\n"
    },
    "init": {
      "disabled": "DISABLED",
      "explanation": ".disabled => Already initialized (package.json:valos section exists)",
      "description": "Initialize the current directory as a ValOS workspace from scratch",
      "package": "valma",
      "version": "0.37.0-prerelease.1",
      "introduction": "Initialize the current directory as a ValOS workspace from scratch.\n\n\nThis command will interactively create and configure a new valma workspace in the current working directory from scratch.\n\nValma init has following interactive phases:\n1. Initialization of package.json via 'yarn init'\n2. Configuration of workspace valos.type and .domain via 'vlm .configure/.valos-stanza'\n3. Addition of new known domains via 'yarn add --dev (-W)'\n4. Selection of in-use toolsets from available toolsets via 'vlm select-toolsets'\n5. Configuration of in-use toolsets and tools via 'vlm configure'\n"
    }
  }
}